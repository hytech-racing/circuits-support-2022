#require 9.06020

// Revision history:
//
// 1.00
// - Initial release
//
// 1.01
// - Dialog mask for text or html output selection corrected
//
// 1.02
// - CSV export added after a suggestion of Christian Schlittler
// - File extension for text file output changed from .bom to .txt
//
// 1.03
// - Added missing description column in value mode.
//
// 1.04
// - List also Packages bei Value
//
// 1.05
// - 2012-03-01 change PartValue[], PartDevice[], PartPackage[], PartHeadline[], PartDescription[] to normal string. alf@cadsoft.de
//   numeric strings with only numericasl characters, sorts up to 8 characters!
//
// 1.06
// - 2012-05-25 support now populated variants
//              switch on/off attributes
//              is now the standard bom.ulp  alf@cadsoft.de
//
// 1.07
// - 2012-06-22 set correct variant
//
// 1.08
// - 2012-11-08 list different values of attributes
//
// 1.09
// - 2012-12-04 now can change the separator character for CSV files.
//              change the character in line Separator = ',';
//
// 1.10
// - 2014-08-07 extended to V7 hierarchical schematic
//
// 1.11
// - 2015-12-10 fixed handling descriptions containing TAB characters
//
// 1.12
// - 2021-12-29 customized for HyTech Racing specific needs
//
// 1.13
// - 2021-12-30 optimized attrition to ensure correct number of spares
// Revision: 1.13
//

char   Separator = ',';

#usage "en: <b>Bill Of Material</b>\n"
           "<p>"
           "Generates a schematic's Bill Of Material including the attributes and attrition percentage"
           "<p>"
           "<author>Author: Arvind Srinivasan</author><br>"

string I18N[] = {
  "en\v"
  "de\v"
  ,
  "<hr><b>ERROR: No Schematic!</b><p>\nThis program can only work in the Schematic editor.\v"
  "<hr><b>FEHLER: Kein Schaltplan!</b><p>\nDieses Programm kann nur in einem Schaltplan verwendet"
  " werden.\v"
  ,
  "Part\tValue\v"
  "Bauteil\tWert\v"
  ,
  "Quantity\tValue\tParts\v"      // 2011-04-08
  "Menge\tWert\tBauteile\v"  // 2011-04-08
  ,
  "Partlist exported from %s at %s\v"
  "Stückliste exportiert aus %s am %s\v"
  ,
  "Bill Of Material - Preview\v"
  "Stückliste - Vorschau\v"
  ,
  "-Close\v"
  "-Schließen\v"
  ,
  "Save Bill Of Material\v"
  "Stückliste speichern\v"
  ,
  "File '\v"
  "Datei '\v"
  ,
  "' exists\n\nOverwrite?\v"
  "' existiert\n\nÜberschreiben?\v"
  ,
  "+&Yes\v"
  "+&Ja\v"
  ,
  "-&No\v"
  "-&Nein\v"
  ,
  "&No\v"
  "&Nein\v"
  ,
  "Name already defined!\v"
  "Name ist bereits definiert!\v"
  ,
  " Header\v"
  " Spaltenüberschrift\v"
  ,
  "&Name:\v"
  "&Name:\v"
  ,
  "+OK\v"
  "+OK\v"
  ,
  "Name can't be empty!\v"
  "Name kann nicht leer sein!\v"
  ,
  "-Cancel\v"
  "-Abbrechen\v"
  ,
  "&Headers\v"
  "&Spaltenüberschriften\v"
  ,
  "Bill Of Material\v"
  "Stückliste\v"
  ,
  "List type\v"
  "Listen-Typ\v"
  ,
  "&Save...\v"
  "&Speichern...\v"
  };
int Language = strstr (I18N [0], language ()) / 3;

string tr (string s)
{
  string t = lookup (I18N, s, Language, '\v');
  return t ? t : s;
}

if (!schematic)
{
  dlgMessageBox (usage + tr ("<hr><b>ERROR: No Schematic!</b><p>\nThis program can only work in"
                 " the Schematic editor."));
  exit (1);
}

string SeparatorString;
int     NumParts;
numeric string Lines[];
numeric string PartName[];
string  PartValue[];
int     PartValueOn[];
int     Selected;

string CurrentVariant = "";
string Variants[] = { "" };  // 2012-04-16
int    cntVD = 0;
int    VDsel = 0;


// cwi: Added arrays for an arbitraty number of attributes.
int UseAttributes = 1;
int FoundAttributes = 0;            // # of different attribute names found in schematic.
numeric string AttributesList[];    // Sorted list of all attributes found in the schematic.
numeric string PartAttributes[];    // Adjusted list of attributes per part.
int attritionIndex = 0;

// Collect part data from the schematic.
//
// Arguments: -
//
// Returns:   NumParts            - # of found parts
//            ParteName[]
//            PartValue[]
//            PartValueOn[]      - 0=part value off, 1= part value on, 2=override with attr. VAL
//            FoundAttributes     - # of different attribute names found in schematic.
//            AttributesList[]   - Sorted list of all attributes found in the schematic.
//            PartAttributes[]   - Adjusted list of attributes per part.

void CollectPartData (string var)
{
  int Found = 0;
  int i;
  string attr[];

  NumParts = 0;

  // First, collect the names of all available attributes.
  FoundAttributes = 0;
  if (UseAttributes) {
    schematic (SCH)
    {
      SCH.allparts (P) // 2014-08-07
      {
        if (P.device.package || strsub(P.name,0,1) == "O")
        {
          if (P.populate)
          {
            P.attributes (A)
            {
              if (0 == FoundAttributes)
              {
                // First one
                AttributesList[0] = A.name;
                FoundAttributes = 1;
              }
              else
              {
                Found = 0;
                for (i = 0; i < FoundAttributes; i ++)
                {
                  if (A.name == AttributesList[i])
                  {
                    // Found an already listed atrribute
                    Found = 1;
                    break;
                  }
                }
                if (0 == Found)
                {
                  if(strsub(A.name,0,6) != "SIGNAL") {
                    // Attribute not listed, add at the end and not SIGNAL.
                    AttributesList[FoundAttributes] = A.name;
                    FoundAttributes ++;
                  }
                }
              }
            }
          }
        }
      }
    }
    AttributesList[FoundAttributes] = "ATTRITION";
    FoundAttributes ++;
    sort (FoundAttributes, AttributesList);
  }
  // Second, collect all data
  schematic (SCH)
  {
    SCH.allparts (P)
    {
      if (P.device.package || strsub(P.name,0,1) == "O")
      {
        if (P.populate)
        {
          PartName[NumParts] = P.name;
          PartValue[NumParts] = P.value;
          PartValueOn[NumParts] = P.device.value == "On";
          // Zero all strings
          for (i = 0; i < FoundAttributes; i ++)
            attr[i] = "";
          P.attributes(A)
          {
            for (i = 0; i < FoundAttributes; i ++)
            {
              if (A.name == AttributesList[i])
              {
                attr[i] = A.value;
              }
              if ("ATTRITION" == AttributesList[i])
              {
                attritionIndex = i;
                if (strsub(P.name,0,1) == "O" || strsub(P.name,0,1) == "F")
                  attr[i] = "100"; // Always do 100% attrition for fuses and external parts
                else {
                  if (strsub(P.name,0,1) == "R" || strsub(P.name,0,1) == "C" || strsub(P.name,0,1) == "D" || (strsub(P.name,0,1) == "L" && strsub(P.name,0,2) != "LS") || strsub(P.name,0,2) == "JP")
                    attr[i] = "2"; // Indicates separate formula later on
                  else
                    attr[i] = "3"; // Indicates separate formula later on
                }
              }
            }
            if ("VALUE" == A.name && 0 < strlen (A.value))
             // Override old fashioned value information!
            PartValueOn[NumParts] = 2;
          }
          PartAttributes[NumParts] = strjoin(attr, Separator);
          NumParts ++;
        }
      }
    }
  }
}

// Generate list with one entry per value.
// 'VALUE' is replaced by the value of attribute 'VAL', if existing.

void GenerateList (void)
{
  int NumLines = 0;
  int Index [];
  string attr[], s, s_val;

  s = strjoin(AttributesList, '\t');

  Lines[NumLines ++] = tr ("Quantity\tValue\tParts\t") + s;                 // 2011-04-08
  sort (NumParts, Index, PartValue, PartAttributes, PartName);
  for (int n1 = 0, n2 = 0; ++ n2 <= NumParts; )
  {
    int i1 = Index [n1];
    strsplit (attr, PartAttributes[i1], Separator);
    s = strjoin(attr, '\t');
    s_val = attr[i1];
    if (n2 < NumParts)
    {
      int i2 = Index [n2]; // 2012-11-08
      strsplit (attr, PartAttributes[i2], Separator);
      if (PartValue[i1] == PartValue[i2] && PartAttributes[i1] == PartAttributes[i2]) // 2012-11-08 check different values of attributes
        continue;
    }
    string Quantity;
    sprintf (Quantity, "%d", n2 - n1);
    Lines[NumLines] = Quantity + "\t" + PartValue[i1] + "\t";
    for (;;)
    {
      Lines[NumLines] += PartName[i1];
      if (++n1 < n2)
      {
        i1 = Index [n1];
        Lines[NumLines] += ", ";
      }
      else
        break;
    }
    // cwi: add extra information from attributes
    Lines[NumLines] += "\t" + s;
    NumLines ++;
  }
  Lines[NumLines] = "";
  string Out;
  for (int l = 1; Lines[l]; l ++)
  {
    string a [];
    int n = strsplit (a, Lines[l], '\t');
    if (strsub(a[attritionIndex + 3],0,1) == "2") { // Do 9 extra for class 2 parts
      sprintf(Out, "%.0f", 100.0 * ((strtod(a[0]) + 9.0) / strtod(a[0]) - 1.0));
      a[attritionIndex + 3] = Out;
    }
    else {
      if (strsub(a[attritionIndex + 3],0,1) == "3") { // Do 2 extra for class 3 parts
        sprintf(Out, "%.0f", 100.0 * ((strtod(a[0]) + 2.0) / strtod(a[0]) - 1.0));
        a[attritionIndex + 3] = Out;
      }
    }
    Lines[l] = strjoin(a, '\t');
  }
}

// 2008-11-24 Christian Schlittler:
// Make comma-serparated list, with all values double-quoted.

string MakeList (void)
{
  string List;
  int numHeaders;

  for (int l = 0; Lines[l]; l ++)
  {
    string a [];
    int n = strsplit (a, Lines[l], '\t');
    if (l == 0)
      numHeaders = n;
    else
      n = numHeaders; // for the hidden key!
    for (int i = 0; i < n; i ++)
      List += "\"" + a[i] + "\"" + SeparatorString;
    List += "\n";
  }
  return List;
}

void SaveList (void)
{
  string FileName;
  string FileExt;

  FileExt = ".csv";
  schematic(SCH) FileName = filesetext (SCH.name, FileExt);
  FileName = dlgFileSave (tr ("Save Bill Of Material"), FileName);
  if (FileName)
  {
    string a [];
    if (!fileglob (a, FileName) || dlgMessageBox (tr ("File '") + FileName +
        tr ("' exists\n\nOverwrite?"), tr("+&Yes"), tr("-&No")) == 0)
    {
      output (FileName, "wt")
      {
        printf ("%s", MakeList ()); // using "%s" to avoid problems if list contains any '%'
      }
    }
  }
}

schematic(SCH) {
  sprintf(SeparatorString, "%c", Separator);
  CurrentVariant = variant();
  SCH.variantdefs(VD) {
    if (CurrentVariant == VD.name) VDsel = cntVD;
    sprintf(Variants[cntVD], "%s", VD.name);
    cntVD++;
  }
}

setvariant(CurrentVariant);
CollectPartData(CurrentVariant);
GenerateList();

dlgDialog (tr ("Bill Of Material"))
{
  dlgListView ("", Lines, Selected);
  dlgHBoxLayout  {
    dlgPushButton (tr ("+&Save")) SaveList ();
    dlgPushButton (tr ("-&Close"))   dlgAccept ();
    dlgStretch(1);
  }
};
